{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/Develop",
    "result": {"pageContext":{"currentCategory":"Develop","categories":["All","Develop","Devops","블로그","featured"],"edges":[{"node":{"id":"f7b48ecc-d863-5a07-822b-c325b0b89fa7","excerpt":"1. Spring의 특징 제어 역전(IoC) 제어 역전(Inversion of Control) 을 특징으로 하는 스프링은 기존 자바 개발 방식과 다르게 작동합니다.\r\nIoC를 적용한 환경에서는 사용할 객체를 직접 생성하지 않고 객체의 생명주기 관리를 외부에 위임합니다.\r\n외부는 스프링 컨테이너, IoC 컨테이너를 의미합니다. 객체의 관리를 외부에 맡겨 제어권이 넘어간 것을 제어 역전이라고 하며, 제어 역전을 통해 의존성 주입(Dependency injection),\r\n관점 지향 프로그래밍(Aspect_Oriented Programming) 등이 가능해집니다. 의존성 주입(DI) 의존성 주입(Dependency Injection)이란 제어 역전의 방법 중 하나로, 사용할 객체를 직접 생성하지 않고 외부 컨테이너가 생성한 객체를 주입받아\r\n사용하는 방식을 의미합니다. 의존성 주입방법 2-1.  생성자를 통한 의존성 주입 2-2.  필드 객체 선언을 통한 의존성 주입 2-3.  sett…","fields":{"slug":"/JAVA/"},"frontmatter":{"categories":"Develop","title":"JAVA Spring Study 1","date":"August 29, 2022"}},"next":{"fields":{"slug":"/DevOps/AKS&DevOps1/"}},"previous":null}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}