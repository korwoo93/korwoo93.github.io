{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/Develop",
    "result": {"pageContext":{"currentCategory":"Develop","categories":["All","Certification","Develop","Kubernetes","Devops","블로그","featured"],"edges":[{"node":{"id":"bdf14ca3-10e2-5a47-9931-bf68222b70fa","excerpt":"1. Spring Boot 동작 방식 스프링 부트에서 Spring-boot-starter-web 모듈을 사용하면 기본적으로 Tomcat을 사용하는 스프링 MVC 구조를 기반으로 동작합니다.  서블릿 : 클라이언트의 요청을 처리하고 결과를 반환하는 자바 웹 프로그래밍 기술 서블릿 컨테이너 : HTTP 요청을 받아 웹페이지를 동적으로 생성하는 역할을 합니다.\r\n서블릿 인스턴스를 생성하고 관리하는 역할을 수행하는 주체,\r\nEx) Tomcat 서블릿 컨테이너의 특징 서블릿 객체를생성, 초기화, 호출, 종료하는 생명주기 관리 서블릿 객체는 싱글톤 패턴으로 관리 멀티 스레딩 지원 스프링에서는 DispatcherServlet이 서블릿의 역할을 수행합니다. 서블릿 컨테이너와 DispatcherServlet은 자동 설정된 web.xml의 설정값을 공유합니다. 동작 원리 DispatcherServlet으로 요청(HttpServletRequest)이 들어오면 DispatcherServlet은 핸들러 …","fields":{"slug":"/JAVA/Spring2/"},"frontmatter":{"categories":"Develop","title":"JAVA Spring Study 2","date":"September 01, 2022"}},"next":{"fields":{"slug":"/JAVA/Spring1/"}},"previous":{"fields":{"slug":"/Certification/CKA/1/"}}},{"node":{"id":"ed35f9d8-70fe-51e8-afc7-f9473e92474b","excerpt":"1. Spring의 특징 제어 역전(IoC) 제어 역전(Inversion of Control) 을 특징으로 하는 스프링은 기존 자바 개발 방식과 다르게 작동합니다.\r\nIoC를 적용한 환경에서는 사용할 객체를 직접 생성하지 않고 객체의 생명주기 관리를 외부에 위임합니다.\r\n외부는 스프링 컨테이너, IoC 컨테이너를 의미합니다. 객체의 관리를 외부에 맡겨 제어권이 넘어간 것을 제어 역전이라고 하며, 제어 역전을 통해 의존성 주입(Dependency injection),\r\n관점 지향 프로그래밍(Aspect_Oriented Programming) 등이 가능해집니다. 의존성 주입(DI) 의존성 주입(Dependency Injection)이란 제어 역전의 방법 중 하나로, 사용할 객체를 직접 생성하지 않고 외부 컨테이너가 생성한 객체를 주입받아\r\n사용하는 방식을 의미합니다. 의존성 주입방법 2-1.  생성자를 통한 의존성 주입 2-2.  필드 객체 선언을 통한 의존성 주입 2-3.  sett…","fields":{"slug":"/JAVA/Spring1/"},"frontmatter":{"categories":"Develop","title":"JAVA Spring Study 1","date":"August 29, 2022"}},"next":{"fields":{"slug":"/Kubernetes/Gasida_Study_homework_1/"}},"previous":{"fields":{"slug":"/JAVA/Spring2/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}